<?php

class AnotherStaffUserDefinitionTest extends \Gems_Test_DbTestAbstract
{
    /**
     * @var string Password to test with
     */
    protected $testPassword = 'correcthorsebatterystaple';

    protected $testUserId = 10001;

    /**
     * @var \Gems_User_StaffUserDefinition
     */
    protected $userDefinition;

    public function setUp()
    {
        parent::setUp();

        $settings = new \Zend_Config_Ini(GEMS_ROOT_DIR . '/configs/application.example.ini', APPLICATION_ENV);
        $sa = $settings->toArray();
        $this->loader  = new \Gems_Loader(\Zend_Registry::getInstance(), $sa['loaderDirs']);
        $this->userDefinition = $this->loader->getUserLoader()->getUserDefinition('StaffUser');
    }

    /**
     * Returns the test dataset xml of the same name as the test
     *
     * @return PHPUnit_Extensions_Database_DataSet_IDataSet
     */
    protected function getDataSet()
    {
        $classFile =  str_replace('.php', '.yml', __FILE__);
        return new PHPUnit_Extensions_Database_DataSet_YamlDataSet(
            $classFile
        );
    }

    /**
     * Test the checkRehash method if an old password is being used
     */
    public function testCheckRehash()
    {
        $oldHashedPassword = $this->userDefinition->hashOldPassword($this->testPassword);
        $this->db->query("UPDATE gems__user_passwords SET gup_password = '$oldHashedPassword'");

        $user = $this->getMockBuilder('\Gems_User_User')
            ->setConstructorArgs([[], $this->userDefinition])
            ->getMock();

        $user->expects($this->exactly(3)) // 2 for a complete run, 1 for a password that doesn't need a rehash
            ->method('getUserLoginId')
            ->will($this->returnValue($this->testUserId));

        $user->expects($this->once()) // Once for a complete run. none for a password that doesn't need a rehash
            ->method('getUserId')
            ->will($this->returnValue(0));

        $result = $this->userDefinition->checkRehash($user, $this->testPassword);

        // Test if the password has been rehashed
        $this->assertTrue($result);

        //print_r($this->db->fetchAll("SELECT * FROM gems__user_passwords"));

        $result2 = $this->userDefinition->checkRehash($user, $this->testPassword);

        // Test if the password doesn't rehash after it has already been rehashed
        $this->assertFalse($result2);

        $row = $this->db->fetchRow(sprintf("SELECT * FROM gems__user_passwords WHERE gup_id_user = %s", $this->testUserId));

        $credentialValidationCallback = $this->userDefinition->getCredentialValidationCallback();

        $callbackResult = call_user_func($credentialValidationCallback, $row['gup_password'], $this->testPassword);

        // Test if the new set password is still correct
        $this->assertTrue($callbackResult);
    }

    /**
     * Test if a password is not being rehashed if it has been generated by the hashPassword method
     */
    public function testCheckRehashWithNewPasswordHash()
    {
        $hash = $this->userDefinition->hashPassword($this->testPassword);
        $this->db->query("UPDATE gems__user_passwords SET gup_password = '$hash'");

        $user = $this->getMockBuilder('\Gems_User_User')
            ->setConstructorArgs([[], $this->userDefinition])
            ->getMock();

        $user->expects($this->exactly(1))
            ->method('getUserLoginId')
            ->will($this->returnValue($this->testUserId));

        $user->expects($this->never())
            ->method('getUserId')
            ->will($this->returnValue(0));

        $result = $this->userDefinition->checkRehash($user, $this->testPassword);

        // Test if the normally hashed password doesn't trigger the rehash
        $this->assertFalse($result);
    }
}