<html xmlns="http://www.w3.org/1999/xhtml" xml:lang="en" lang="en">
<head>
    <meta charset="utf-8">
    <title>GemsTracker 2</title>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <link rel="stylesheet" href="/style/carefacts.css">
    {% block header %}{% endblock %}
</head>
<body
        {% if current_identity is defined %}
            data-max-idle-time="{{ _config.max_idle_time }}"
            data-auth-poll-interval="{{ _config.auth_poll_interval }}"
        {% endif %}
>
<div id="container" class="container-fluid">
    <header>
        <div class="logo"></div>
        <div class="tools">
            {% if locale is defined %}{{ include('@layout/languages.html.twig') }}{% endif %}
        </div>
    </header>

    <div class="content">
        <div id="main-container" class="include-menu">
            <div id="main" class="container-fluid">
                {% if flash is defined %}{{ include('@layout/flash-messages.html.twig') }}{% endif %}

                {% block content %}{% endblock %}
            </div>
        </div>
        <div id="menu" role="navigation">
            {% if menuHtml is defined %}
                {{ menuHtml }}
            {% endif %}
            {% if mainMenu is defined %}
                {{ mainMenu.renderMenu()|raw }}
            {% endif %}
        </div>
        <footer>
        </footer>
    </div>
</div>

<div id="authIdleCheckerWarning" class="hidden">
    <div class="alert alert-warning clearfix">
        <p>{{ trans('You have been inactive for a while. You will be logged out shortly.') }}</p>

        <div class="pull-right">
            <button class="btn btn-primary" id="authIdleCheckerWarningAlive">{{ trans('Stay logged in') }}</button>
            <button class="btn btn-secondary" id="authIdleCheckerWarningIgnore">{{ trans('Ignore') }}</button>
        </div>
    </div>
</div>

{% if current_identity is defined %}
    <script>
        const AuthIdleChecker = function () {
            this.requestTime = new Date();
            this.maxIdleTime = parseInt(document.getElementsByTagName('body')[0].getAttribute('data-max-idle-time'));
            this.authPollInterval = parseInt(document.getElementsByTagName('body')[0].getAttribute('data-auth-poll-interval'));

            this.init();

            this.schedule();
        };

        AuthIdleChecker.prototype.init = function () {
            const buttonAlive = document.getElementById('authIdleCheckerWarningAlive');
            buttonAlive?.addEventListener('click', () => {
                fetch('/auth/idle-alive', {method: 'post'})
                    .then((response) => {
                        if (!response.ok) {
                            throw new Error();
                        }

                        return response.json();
                    })
                    .then((data) => {
                        this.requestTime = new Date();

                        this.toggleIdleLogoutWarning(false);

                        if (data.redirect) {
                            window.location.href = data.redirect;
                        }
                    });
            });

            const buttonIgnore = document.getElementById('authIdleCheckerWarningIgnore');
            buttonIgnore?.addEventListener('click', () => {
                this.toggleIdleLogoutWarning(false);
            });
        };

        AuthIdleChecker.prototype.schedule = function () {
            setTimeout(() => {
                this.check();
                this.schedule();
            }, this.authPollInterval * 1000);
        };

        AuthIdleChecker.prototype.check = function () {
            fetch('/auth/idle-poll')
                .then((response) => {
                    if (!response.ok) {
                        throw new Error();
                    }

                    return response.json();
                })
                .then((data) => {
                    if (data.show_idle_logout_warning) {
                        this.toggleIdleLogoutWarning(true);
                    }

                    if (data.redirect) {
                        window.location.href = data.redirect;
                    }
                })
                .catch(() => {
                    // Fallback in case of e.g. network failure
                    if ((+ new Date()) - (+this.requestTime) > this.maxIdleTime * 1000) {
                        window.location.href = '/';
                    }
                });
        };

        AuthIdleChecker.prototype.toggleIdleLogoutWarning = function (show) {
            const warning = document.getElementById('authIdleCheckerWarning');
            if (warning) {
                if (show) {
                    warning.classList.remove('hidden');
                } else {
                    warning.classList.add('hidden');
                }
            }
        };

        window.addEventListener('load', () => {
            const authIdleChecker = new AuthIdleChecker();
        });
    </script>
{% endif %}
</body>
</html>
