<?php

/**
 *
 * @package    Gems
 * @subpackage Default
 * @author     Matijs de Jong <mjong@magnafacta.nl>
 * @copyright  Copyright (c) 2015 Erasmus MC
 * @license    New BSD License
 */

namespace Gems\Handlers\Setup;

use Gems\AuthNew\AuthenticationMiddleware;
use Gems\Db\ResultFetcher;
use Gems\Exception;
use Gems\Handlers\LogHandler;
use Gems\Model\LogModel;
use Gems\Repository\OrganizationRepository;
use Gems\Repository\PeriodSelectRepository;
use Gems\User\Organization;
use Gems\User\User;
use Gems\User\UserLoader;
use Gems\Model\StaffLogModel;
use Psr\Cache\CacheItemPoolInterface;
use Zalt\Base\TranslatorInterface;
use Zalt\Model\MetaModelInterface;
use Zalt\Model\MetaModellerInterface;
use Zalt\Model\MetaModelLoader;
use Zalt\SnippetsActions\SnippetActionInterface;
use Zalt\SnippetsLoader\SnippetResponderInterface;

/**
 *
 *
 * @package    Gems
 * @subpackage Default
 * @copyright  Copyright (c) 2015 Erasmus MC
 * @license    New BSD License
 * @since      Class available since version 1.7.1 16-apr-2015 17:36:20
 */
class StaffLogHandler extends LogHandler
{
    /**
     * The parameters used for the autofilter action.
     *
     * When the value is a function name of that object, then that functions is executed
     * with the array key as single parameter and the return value is set as the used value
     * - unless the key is an integer in which case the code is executed but the return value
     * is not stored.
     *
     * @var array Mixed key => value array for snippet initialization
     */
    protected array $autofilterParameters = ['extraFilter' => 'getStaffFilter'];

    /**
     * The snippets used for the index action, before those in autofilter
     *
     * @var mixed String or array of snippets name
     */
    protected array $indexStartSnippets = ['Generic\\ContentTitleSnippet', 'Log\\StaffLogSearchSnippet'];

    public function __construct(
        SnippetResponderInterface $responder,
        MetaModelLoader $metaModelLoader,
        TranslatorInterface $translate,
        CacheItemPoolInterface $cache,
        LogModel $logModel,
        PeriodSelectRepository $periodSelectRepository,
        protected readonly OrganizationRepository $organizationRepository,
        protected readonly StaffLogModel $staffLogModel,
        protected readonly UserLoader $userLoader,
    ) {
        parent::__construct($responder, $metaModelLoader, $translate, $cache, $logModel, $periodSelectRepository);
    }

    protected function getModel(SnippetActionInterface $action): MetaModellerInterface
    {
        $currentUser  = $this->request->getAttribute(AuthenticationMiddleware::CURRENT_USER_ATTRIBUTE);
        if (! $currentUser->hasPrivilege('pr.staff.see.all')) {
            $selectedUserOrg = $this->getSelectedUserOrganization();
            if ($selectedUserOrg) {
                if (! $currentUser->isAllowedOrganization($selectedUserOrg->getId())) {
                    throw new Exception($this->_('No access to page'), 403, null, sprintf(
                        $this->_('You have no right to access users from the organization %s.'),
                        $selectedUserOrg->getName()
                    ));
                }
            }
        }

        if ($action->isDetailed()) {
            $this->staffLogModel->applyDetailSettings();
        } else {
            $this->staffLogModel->applyBrowseSettings();
        }

        return $this->staffLogModel;
    }

    /**
     * Function to allow the creation of search defaults in code
     *
     * @see getSearchFilter()
     *
     * @return array
     */
    public function getSearchDefaults(): array
    {
        $data = parent::getSearchDefaults();

        return $data;
    }

    /**
     * Load the user selected by the request - if any
     *
     * @staticvar User $user
     * @return User|bool or false when not available
     * /
    public function getSelectedUser(): User|bool
    {
        static $user = null;

        if ($user !== null) {
            return $user;
        }

        $staffId = $this->request->getAttribute(MetaModelInterface::REQUEST_ID);
        if ($staffId) {
            $user = $this->userLoader->getUserByStaffId((int)$staffId);
            return $user;
        }
        return false;
    }

    /**
     * @return Organization|null
     */
    public function getSelectedUserOrganization(): ?Organization
    {
        return $this->organizationRepository->getOrganizationForStaffId((int) $this->requestInfo->getParam(MetaModelInterface::REQUEST_ID));
    }

    /**
     * Get filter for current respondent
     *
     * @return array
     */
    public function getStaffFilter(): array
    {
        $staffId = $this->request->getAttribute(MetaModelInterface::REQUEST_ID);
        return ['gla_by' => (int)$staffId];
    }

    public function prepareAction(SnippetActionInterface $action): void
    {
        parent::prepareAction($action); // TODO: Change the autogenerated stub
    }
}
